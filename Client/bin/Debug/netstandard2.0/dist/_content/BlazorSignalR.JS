!function(e){var n={};function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)o.d(t,r,function(n){return e[n]}.bind(null,r));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=0)}([function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0});const t=o(1),r=o(2);var c;!function(e){const n="BlazorSignalR",o={ServerSentEventsTransport:new t.ServerSentEventsTransport,WebSocketsTransport:new r.WebSocketsTransport};e.initialize=function(){"undefined"==typeof window||window[n]?window[n]=Object.assign({},window[n],o):window[n]=Object.assign({},o)}}(c||(c={})),c.initialize()},function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.ServerSentEventsTransport=class{constructor(){this.connections=new Map,this.CreateConnection=((e,n)=>{const o=n.invokeMethod("get_InternalSSEId"),t=n.invokeMethod("get_SSEAccessToken");t&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(t)}`);const r=new EventSource(e,{withCredentials:!0});this.connections.set(o,r),r.onmessage=(e=>{n.invokeMethod("HandleSSEMessage",btoa(e.data))}),r.onerror=(e=>{const o=new Error(e.data||"Error occurred");n.invokeMethod("HandleSSEError",o.message)}),r.onopen=(()=>{n.invokeMethod("HandleSSEOpened")})}),this.CloseConnection=(e=>{const n=e.invokeMethod("get_InternalSSEId"),o=this.connections.get(n);o&&(this.connections.delete(n),o.close())}),this.IsSupported=(()=>"undefined"!=typeof EventSource)}}},function(e,n,o){"use strict";Object.defineProperty(n,"__esModule",{value:!0});class t{constructor(){this.CreateConnection=((e,n,o)=>{const r=o.invokeMethod("get_InternalWebSocketId"),c=o.invokeMethod("get_WebSocketAccessToken");c&&(e+=(e.indexOf("?")<0?"?":"&")+`access_token=${encodeURIComponent(c)}`),e=e.replace(/^http/,"ws");const s=new WebSocket(e);t.connections.set(r,s),n&&(s.binaryType="arraybuffer"),s.onopen=(e=>{o.invokeMethod("HandleWebSocketOpened")}),s.onerror=(e=>{const n=e instanceof ErrorEvent?e.error:new Error("Error occured");o.invokeMethod("HandleWebSocketError",n.message)}),s.onmessage=(e=>{o.invokeMethod("HandleWebSocketMessage",btoa(e.data))}),s.onclose=(e=>{o.invokeMethod("HandleWebSocketClosed")})}),this.Send=((e,n)=>{const o=n.invokeMethod("get_InternalWebSocketId"),r=t.connections.get(o);if(!r)throw new Error("Unknown connection");r.send(atob(e))}),this.CloseConnection=(e=>{const n=e.invokeMethod("get_InternalWebSocketId"),o=t.connections.get(n);o&&(t.connections.delete(n),o.onclose=(()=>{}),o.onmessage=(()=>{}),o.onerror=(()=>{}),o.close())}),this.IsSupported=(()=>"undefined"!=typeof WebSocket)}}t.connections=new Map,n.WebSocketsTransport=t}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,