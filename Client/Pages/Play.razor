@page "/play/{gameId}"
@using BlazorSignalR
@using Microsoft.AspNetCore.SignalR.Client
@using SpotIt.Shared
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<h1>Game</h1>

<p>Current game: @gameId</p>

@if (gameId == null || game == null)
{
    <GameList></GameList>
}
else if (this.State == Game.GameState.Created)
{
    <p>Enter your name</p>
    <input type="text" @bind="user" />
    <button @onclick="@JoinGame">join</button>
}
else if (this.State == Game.GameState.Joined || this.State == Game.GameState.Started)
{
    <p>Current game: @gameId</p>

    <button class="btn btn-danger" @onclick="Protest">Protest!!!</button>
    <button class="btn btn-primary" @onclick="SelectItem">1</button>
}
else if (this.State == Game.GameState.Finished)
{
    <p>Game over</p>
}

@code {

    [Parameter]
    public string gameId { get; set; }

    public string user { get; set; }

    public Game.GameState State { get; set; }
    public Game game;
    HubConnection _connection;

    protected override async Task OnInitializedAsync()
    {
        _connection = new HubConnectionBuilder().WithUrlBlazor("/hub", JsRuntime, NavigationManager, options: opt => { }).Build();
        _connection.On<Game>("Refresh", GameLoaded);
        await _connection.StartAsync();

        if (!string.IsNullOrWhiteSpace(gameId))
        {
            await _connection.InvokeAsync<Game>("LoadGame", gameId);
            this.State = Game.GameState.Created;
        }
    }

    void Protest()
    {
    }

    void SelectItem()
    {
    }

    private async Task JoinGame()
    {
        await _connection.InvokeAsync<Game>("JoinGame", this.game.Id, user);

        //await Http.SendJsonAsync(HttpMethod.Post, $"/api/game/{gameId}/join", user);
        //game = await Http.GetJsonAsync<Game>("api/game/" + gameId);
        this.State = Game.GameState.Joined;

        Console.WriteLine(game);
    }
    protected async Task GameLoaded(Game game)
    {
        this.game = game;
        if (game.State == Game.GameState.Started || game.State == Game.GameState.Finished)
            this.State = game.State;

        StateHasChanged();
    }
}