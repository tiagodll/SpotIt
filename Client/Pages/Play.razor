@page "/play/{gameId}"
@using System.Threading
@using BlazorSignalR
@using Microsoft.AspNetCore.SignalR.Client
@using SpotIt.Shared
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

    @if (overlay)
    {
        <div class="loading-overlay"></div>
    }

    <h1>Game</h1>

    <p>Current game: @gameId</p>

    @if (gameId == null || game == null)
    {
        <p>Do you want to host your own game?</p>
    }
    else if (game.State == Game.GameState.Created && this.player == null)
    {
        <p>Enter your name</p>
        <input type="text" @bind="name" />
        <button @onclick="@JoinGame">join</button>
    }
    else if (game.State == Game.GameState.Created && this.player != null)
    {
        <p>Waiting for game to start</p>
        <p>players:</p>
        <ul>
            @foreach (var player in game?.Players)
            {
                <li>@player.Name</li>
            }
        </ul>
    }
    else if (game.State == Game.GameState.Started)
    {
        var card = player?.Cards.Last();
        <p>Current game: @gameId</p>

        <p>Cards:</p>
        <ul class="spotit-card">
            @for (var i = 0; i < card?.items.Count; i++)
            {
                var clss = card.GetItemClass(card.items.Count, i);
                var item = card.items[i];

                <li class="@clss" @onclick="@(e => PlayCard(item))">@item</li>
            }
</ul>

        <button class="btn btn-danger" @onclick="Protest">Protest!!!</button>
    }
    else if (game.State == Game.GameState.Finished)
    {
        if (game.Players.Find(x => x.Cards.Count == 0 && x.Name == name) != null)
        {
            <h1>You win!</h1>
        }
        else
        {
            <h2>Game over Loser</h2>
        }
    }

    @code {

        [Parameter]
        public string gameId { get; set; }

        public string name { get; set; }
        public Player player { get; set; }
        public bool overlay { get; set; }

        public Game game;
        HubConnection _connection;

        protected override async Task OnInitializedAsync()
        {
            _connection = new HubConnectionBuilder().WithUrlBlazor("/hub", JsRuntime, NavigationManager, options: opt => { }).Build();
            _connection.On<Game>("Refresh", GameLoaded);
            await _connection.StartAsync();

            if (!string.IsNullOrWhiteSpace(gameId))
            {
                await _connection.InvokeAsync<Game>("Connect", gameId);
                await _connection.InvokeAsync<Game>("LoadGame", gameId);
            }
        }

        void Protest()
        {
        }

        private async void PlayCard(int item)
        {
            Console.WriteLine($"played item: {item}");
            this.overlay = true;
            var timer = new Timer(new TimerCallback(_ =>
            {
                this.overlay = false;
                this.StateHasChanged();
            }), null, 1000, System.Threading.Timeout.Infinite);
            await _connection.InvokeAsync<Game>("PlayCard", this.game.Id, name, player.Cards.Last(), item);
        }

        private async Task JoinGame()
        {
            await _connection.InvokeAsync<Game>("JoinGame", this.game.Id, name);
        }
        protected async Task GameLoaded(Game game)
        {
            Console.WriteLine(game.State);
            this.game = game;
            this.player = game.Players.Find(x => x.Name == this.name);

            StateHasChanged();
        }
    }